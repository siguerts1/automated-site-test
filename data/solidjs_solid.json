[
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/176721823",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/176721823/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/176721823/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.9.0",
    "id": 176721823,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4KiI-f",
    "tag_name": "v1.9.0",
    "target_commitish": "main",
    "name": "v1.9.0 - LGTM!",
    "draft": false,
    "prerelease": false,
    "created_at": "2024-09-24T21:24:06Z",
    "published_at": "2024-09-24T21:32:04Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.9.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.9.0",
    "body": "This release like the last is focusing on small quality of life improvements and adjustments that will help us move towards 2.0. So while not the most exciting release to everyone it provides some really important features and fixes to some developers.\r\n\r\nAnd unlike many previous releases the vast majority of the work and features came from PRs from the community. So really all I can say is Looks Good to Me!\r\n\r\n## Better JSX Validation\r\n\r\nWhile still incomplete across templates we've added JSDOM to the compiler to better detect invalid HTML at build time by comparing what we expect the template to be with what a browser would output. This now includes things that are nested we didn't detect before like putting `<a>` inside other `<a>` tags which will lead to the browser \"correcting\" it in less than intuitive ways.\r\n\r\n\r\n## Improved Exports\r\n\r\nWhile each environment in `solid-js/web` has its own methods to be used in the compiler. We are now exporting the client methods from the server to prevent weird import errors. Now these methods will throw if used in this environment but shouldn't break your build.\r\n\r\nAdditionally we have seen some issues in bundlers that incorrectly feed our ESM exports back through the browser field. While this is a known issue they all pointed issues at each other and with no intention of fixing it. We have removed the browser field in this release, meaning some legacy packages may have issues resolving browser if they don't support export conditions.\r\n\r\nThis is regretful but this blocked deployments on several platforms and since this was the only fix at our disposal after two years of attempting to push this issue to the bundlers to no avail, we've moved forward with it.\r\n\r\n## Custom Element improvements\r\n\r\nWe have a few improvements to our custom element support in this release. First off we now detect elements with the `is` attribute as custom elements which means all the special behavior is afforded to them.\r\n\r\nWe've also improved our event handler delegating retargetting to better handle shadow DOM events. There were cases where we skipped over part of the tree.\r\n\r\nFinally we've added the `bool:` attribute namespace to handle explicitly setting certain attributes according to boolean attribute rules. While this isn't necessary for built-in booleans currently we handle most attributes as properties and we lacked a specific override. But now we have it:\r\n\r\n```js\r\n<my-element bool:enable={isEnabled()}></my-element>\r\n```\r\n\r\n## Support for handleEvent Syntax in Non-Delegated Events\r\n\r\nA little known thing is that events actually also support objects instead of functions (See: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\r\n\r\nWe(thanks @titoBouzout) realized we can use this mechanism as a way to set advanced rules like `passive` or `capture` on this object as way to handle all current and future event attributes that browsers might add. This way we don't need specific mechanisms like `oncapture:` (which is now deprecated).\r\n\r\nInstead using `on:` you can set the event properties you wish.\r\n\r\n```js\r\n<>\r\n  <div on:click={{\r\n    handleEvent(e) {\r\n      console.log(\"clicked\", e)\r\n    },\r\n    once:true\r\n  }/>\r\n  <div on:wheel={{\r\n    handleEvent(e) {\r\n      e.preventDefault() // only works on not passive events\r\n      e.stopPropagation()  \r\n      console.log(\"wheel stopped?\")\r\n    },\r\n    passive: false\r\n  }} />\r\n</>\r\n```\r\n\r\n## Other Updates\r\n\r\nWe've fixed an issue with lazy images. Apparently, cloneNode doesn't handle them properly so we've updated our heuristic to treat templates with lazy images to be handled with `importNode`.\r\n\r\nWe've improved our Hydration Mismatch Error to output the template of that it can't find the matching ID for. This should make it easier to track down where the hydration errors are occurring. There have been several hydration improvements over the later 1.8 releases so upgrading will likely improve the situation for those who have been facing issues.\r\n\r\nFinally, we've improved some of the types in the JSX and Signal Setter in this release.\r\n\r\n-------------\r\n\r\nBig thanks to those who contributed to this release: @wkelly17, @olivercoad, @titoBouzout, @trusktr, @Huliiiiii. And thanks to all of you who gave feedback on the [Metadata/Head Tag RFC](https://github.com/solidjs/solid/discussions/2294). While it didn't make it in this time around you've definitely given us stuff to consider for its future design.\r\n\r\nBest,\r\n@ryansolid\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/176721823/reactions",
      "total_count": 234,
      "+1": 85,
      "-1": 0,
      "laugh": 2,
      "hooray": 46,
      "confused": 0,
      "heart": 33,
      "rocket": 66,
      "eyes": 2
    },
    "mentions_count": 6
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/124339786",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/124339786/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/124339786/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.8.0",
    "id": 124339786,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4HaUZK",
    "tag_name": "v1.8.0",
    "target_commitish": "main",
    "name": "v1.8.0 - Bifr\u00f6st",
    "draft": false,
    "prerelease": false,
    "created_at": "2023-10-09T23:09:45Z",
    "published_at": "2023-10-09T23:33:49Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.8.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.8.0",
    "body": "> In Norse mythology, Bifr\u00f6st (/\u02c8b\u026avr\u0252st/), is a burning rainbow bridge that reaches between Midgard (Earth) and Asgard, the realm of the gods.\r\n\r\nI am first to admit this is not the most exciting release from a feature standpoint. I was looking for cool code snippets but these changes are for the most part all under the hood. We are in that time period between the end of 1.x and the start of 2.0. We recently made our new reactive experiments public and continue to build those out in public with [@solidjs/signals](https://github.com/solidjs/signals). We need to build for the future while bridging the gap with the present.\r\n\r\nThis version is about addressing some of the fundamentals that will help projects like SolidStart move forward while we do the transition. Async and Resources need work and are too all in. It is great to have a solution but now that we have a better understanding we need to start breaking things apart into their fundamental pieces and exposing them in ways we can better leverage. And in Solid 1.8 a big part of that is rethinking serialization, our bridge between the server and the client.\r\n\r\nA lot of our learning here has come from applying what we have learned when doing performance benchmarks for the work that has been funded by [Google Chrome Aurora](https://www.solidjs.com/blog/chrome-supports-solidjs). In order to realize our goal we've had to update the foundations.\r\n\r\n## De-duping Streaming Serialization\r\n\r\nThis is the marquee feature of this release and is largely the work of @lxsmnsyc. Solid has been able to serialize promises and do streaming for a couple of years now, but it was very special-cased. Now it is a generic mechanism.\r\n\r\nThis matters because it means that we have decoupled the promise serialization from Resources, and in so decoupled the whole \"when the stream is done\" from them. This opens up things like nested promises and being able to serialize more complicated data structures.\r\n\r\nWe now also have a mechanism that deeply de-dupes data serialized across flushes. If the data is ever serialized during the request we won't send it again even if sent in different streaming chunks. This is important for features like Islands where you might pass the same props to multiple Islands across different Suspense boundaries and don't want to send the data more than once. This is very beneficial where that data can be accessed at varying depths (recursive comments in say a Hackernews site) or other recursive data structures.\r\n\r\n## Hydration Improvements\r\n\r\nFragments for Hydration have been a bit of a pain and we keep seeming to have different issues reported around element duplication. Most commonly this has been around where there are `lazy` component siblings or where the fragment is top-level. After looking into and fixing an [issue for Astro](https://github.com/withastro/astro/pull/8365) I decided to look at some of the oldest bugs in Solid and found it was a similar bug.\r\n\r\nIn many cases, the DOM can change throughout Hydration while doing things like streaming but we need to pause and resume hydration because code isn't available yet. While we don't create elements during hydration, getting an accurate snapshot of the DOM for the current state for future list reconciliation is a process we've had a few tries at but in 1.8 we update this in a way that makes sure it doesn't get out of date.\r\n\r\nAlso in 1.8, we have added some performance improvements to hydration in the form of not redundantly setting attributes or props as the page hydrates similar to how we don't update text. This is all migration towards a future where we don't need to do as much hydration, but it is important to note that values will be kept as they were on the server rather than how they may compute at runtime during hydration. In so we will be erroring more aggressively when mismatches happen.\r\n\r\n## Smaller Templates\r\n\r\nIn 1.7 we removed unnecessary closing tags from template strings. It was a bit painful because we were a bit overzealous at first. While I believe in the end we got to a good place, ultimately all but the simplest reductions have been hidden behind a compiler flag(`omitNestedClosingTags`). Thanks to work from @intrnl we are implementing another template size reduction technique of removing unnecessary quotes. Quotes are actually not required by HTML in some cases and it can add up.\r\n\r\n## Other\r\n\r\n### Fix NGINX Server Side Includes\r\n\r\nComments led with `#` are treated as special directives for a few different servers so we've needed to change our open hydration markers to `$`. As usual, your version of Solid and the Babel Plugin should be the same to ensure this matches up.\r\n\r\n### Better Guards on Global Scripts\r\n\r\nSolid uses an inline HydrationScript as a way to do processing before the framework and code have loaded. To handle things like event capture and streaming. However, we didn't do a good job of guarding the right thing when multiple were added to the same page, a situation that can happen in Micro-frontends or 3rd party Islands solutions. Now the script guards against duplicate inclusion.\r\n\r\n---------\r\nWith another release out, I'd like to thank everyone involved in this release and in the various efforts across our ecosystem. From everything from the Docs effort to the Playground infrastructure. We've started to tighten up on features for 1.x and moving towards our 2.0 efforts, so we ask for a bit of patience but in the coming months as we put out some RFCs for 2.0 I look forward to engaging you in discussions on the future of Solid.\r\n\r\nThanks,\r\n@ryansolid ",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/124339786/reactions",
      "total_count": 244,
      "+1": 54,
      "-1": 0,
      "laugh": 4,
      "hooray": 82,
      "confused": 0,
      "heart": 39,
      "rocket": 41,
      "eyes": 24
    },
    "mentions_count": 3
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/97429510",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/97429510/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/97429510/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.7.0",
    "id": 97429510,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4FzqgG",
    "tag_name": "v1.7.0",
    "target_commitish": "main",
    "name": "v1.7.0 - U Can't Type This",
    "draft": false,
    "prerelease": false,
    "created_at": "2023-03-30T06:12:38Z",
    "published_at": "2023-03-30T06:33:07Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.7.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.7.0",
    "body": "Solid has experienced incredible growth in usage the past 6 months. Companies are using it to power production applications and SolidStart Beta has been a big part of that. As a natural part of this growth and increased use at scale we are continuing to learn what works well and what the rough edges in Solid are today.\r\n\r\nThis v1.7 release marks the beginning of the migration roadmap to v2.0. We are beginning to re-evaluate core APIs and will begin introducing new ones while reasonably deprecating older ones in a manner that eases breaking changes. Our intention is to ease the broader ecosystem into preparing for improvements that a major 2.0 will unlock for the whole community.\r\n\r\n## Improved TypeScript\r\n\r\n### Null-Asserted Control Flow\r\n\r\nOne of the pains of using Solid with TypeScript has been that JSX control flows can't really type narrow. This is true, but starting with the migration to explicit `keyed` in v1.5 we now complete this story by introducing callback forms for `<Show>` and `<Match>` that work when non-keyed.\r\n\r\nThe main difference is the callback form instead of passing in the value as it does when `keyed`, passes in a function that is type narrowed.\r\n\r\n```js\r\n// keyed w/ callback - reruns full callback on change\r\n<Show when={user()} keyed>\r\n  {nonNullUser => <div>{nonNullUser.name}</div>}\r\n</Show>\r\n\r\n// non-keyed w/o callback... - only updates the one expression, needs ! assertion\r\n<Show when={user()}>\r\n  <div>{user()!.name}</div>\r\n</Show>\r\n\r\n// NEW!\r\n// non-keyed w/ callback - only updates the one expression\r\n<Show when={user()}>\r\n  {nonNullUser => <div>{nonNullUser().name}</div>}\r\n</Show>\r\n```\r\n\r\nKeep in mind because we are non-null asserting the input signal so it won't expect null in closures that execute when the condition is no longer satisfied. For this reason the accessor from the callback is special and will throw when attempted to be accessed when the condition is no longer true. This may be unexpected but it is our best attempt to keep TypeScript strict and not present inconsistency in reactivity. Luckily this only applies to things like timers which you should be cleaning up anyway and not things like event handlers. We recommend using the original conditions source in those closures if you must.\r\n\r\n### Better Event Types for Input Elements\r\n\r\nThis has irked people for a while but we come by it honestly, `target` is gives you a type of `Element` rather than the specific element that is the target. That means no access to `.value` or `.checked`. The reason is there is no way to know at compile time what the target of an event will be. The `currentTarget` will be the element you attach the event to but the target can be anything.\r\n\r\nThere is a way to work around this though, in that if we know the `currentTarget` is of type that generates the event and that the `currentTarget` is the the type of this element we can assume it is the `target` as well. Not perfect logic but it is what React does and we do too.\r\n\r\nNow `onInput`, `onChange`, `onBlur`, `onFocus`, `onFocusIn`, and `onFocusOut` all support more detailed `target` when applied to `HTMLInputElement`, `HTMLTextAreaElement`, and `HTMLSelectElement`.\r\n\r\n### Stricter JSX Elements\r\n\r\nStrict JSX elements have been tricky because we have to acknowledge at a certain point that TypeScript is to serve our purposes rather than to represent all possible values that could work. For us the ambiguity lies in functions.\r\n\r\nSolid's JSX needs to accept functions to handle dynamic insertion. However, in authoring it leads to awkward situations.\r\n\r\nYou first hit this the first time use Solid. You create that counter and don't call `count` as a function and it works.\r\n\r\n```js\r\nfunction Counter() {\r\n  const [count, setCount] = createSignal(1);\r\n\r\n  return <button onClick={() => setCount(c => c + 1)}>{count}</button>;\r\n}\r\n```\r\n\r\nThis example works in some places and not others which might lead to the wrong conclusions.\r\n\r\nThe second place you might hit this is when you get a little further on your journey and decide you need a component to re-render and decide that you can just wrap the whole thing in a function:\r\n\r\n```js\r\nfunction MyComp(props) {\r\n  return () => {\r\n    // look working early returns\r\n    if (props.count > 5) {\r\n      return <div>Maximum Tries</div>;\r\n    }\r\n\r\n    return <div>Attempt {props.count}</div>;\r\n  };\r\n}\r\n```\r\n\r\nAgain this seems fine, except the fact that every time `count` changes you are recreating all the DOM Elements even when it resolves to the same conditional.\r\n\r\nEventually you might even not think twice about passing functions into children of arbitrary components:\r\n\r\n```js\r\n<MyComp>\r\n  <MyComp2>\r\n    <MyComp3>{() => <div>{resource()}</div>}</MyComp3>\r\n  </MyComp2>\r\n</MyComp>\r\n```\r\n\r\nBut what does this do? When is the function called?\r\n\r\nAs it turns out removing functions from `JSX.Element` type makes all of these scenarios error. Components only expect the values dictated by their types.\r\n\r\n```js\r\nfunction MyLayout(props: { children: JSX.Element }): JSX.Element;\r\n\r\nfunction MyFor<T, U extends JSX.Element>(props: { each: T[],  children: (item: T) => U }): JSX.Element;\r\n\r\n// valid\r\n<MyLayout>Hello</MyLayout>\r\n<MyLayout><p>Hello</p></MyLayout>\r\n<MyLayout>{name()}</MyLayout>\r\n<MyLayout>{name() && <p>Hello</p>}</MyLayout>\r\n<MyLayout>{(() => {\r\n  return <p{name()}</p>\r\n})()}</MyLayout>\r\n<MyLayout>{untrack(() => {\r\n  return <p>{name()}</p>\r\n})}</MyLayout>\r\n<MyFor each={users()}>{(user) => <div>{user.name}</div>}</MyFor>\r\n\r\n// invalid\r\n<MyLayout>{name}</MyLayout>\r\n<MyLayout>{() => <p>Hello</p>}</MyLayout>\r\n<MyLayout>{() => \"Hello\"}</MyLayout>\r\n<MyLayout>{() => name() && <p>Hello</p>}</MyLayout>\r\n<MyFor each={users}>{(user) => <div>{user.name}</div>}</MyFor>\r\n<MyFor each={users()}><div>Not a Function</div></MyFor>\r\n```\r\n\r\nThe tradeoff here is that authoring components you can no longer just return a Signal or Memo without casting. If using JSX you can always return a Fragment.\r\n\r\nIf not you will need to cast to `unknown as JSX.Element`.\r\n\r\n## Better Errors\r\n\r\n### `catchError` replaces `onError`\r\n\r\nError Handling is complicated enough without having to try to guess how they propagate. `onError` admittedly is a lower level primitive but fundamentally had this flaw. It worked by registering an error handler on the parent scope, but left it ambiguous how to handle siblings. Is it a queue? Are they independent?\r\n\r\nAs a result we are introducing `catchError` in this release which introduces its own scope to catch any errors below it. The first argument in the primitive is similar to the try and the second argument is the catch.\r\n\r\n```js\r\ncatchError(\r\n  () => {\r\n    // do stuff\r\n    throw new Error(\"I've Errored\");\r\n  },\r\n  err => console.log(err)\r\n);\r\n```\r\n\r\n`onError` will still be present until it can be removed in a future major version.\r\n\r\n### Standardized Errors\r\n\r\nError Handling has had many weird edge cases introduced by applications throwing unusual values. In v1.7 we wrap all thrown values that aren't of type `Error` in a `new Error` and attach the original thrown value as `.cause`.\r\n\r\n## More Performant Dev Tools\r\n\r\nNow that [Solid Dev Tools](https://github.com/thetarnav/solid-devtools) have been stabilizing, we have a much better idea what support we need for them. In so we were able to remove the very costly serialization we were doing for generating unique identifiers. Conventions around naming and exports were streamlined and standardized as well.\r\n\r\n## Others\r\n\r\n- Smaller compiled output, remove auxilary closing tags\r\n- Support for `prop:` and `attr:` in Spreads\r\n- Don't apply special props (like `readonly`) to custom elements\r\n- Reverse cleanup execution order at the same level\r\n- Introduced improved serializer, [seroval](https://github.com/lxsmnsyc/seroval)\r\n- Fixed quirks in Solid's treeshaking in Rollup\r\n- Minify inline class and style attributes\r\n- Update `solid-ssr` to type `\"module\"`\r\n- Test Suite moved to Vitest\r\n\r\nBig thanks to @lxsmnsyc, @thetarnav, @niccholaspage, @atk, @Exelord, @jpdutoit, @titoBouzout, @MarkChrisLevy, @ulivz for your contributions and to everyone who contributed missing JSX types.\r\n\r\nAlso to @LiQuidProQuo, @fabiospampinato for challenging decisions. This was the most difficult release we had in terms of making decisions due to the impact it has on TypeScript so it was valuable seeing the other opinion.\r\n\r\nFinally special shoutout to @otonashixav, who is our guiding light in terms of TypeScript and is the only way a release like this happens.",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/97429510/reactions",
      "total_count": 373,
      "+1": 126,
      "-1": 0,
      "laugh": 10,
      "hooray": 116,
      "confused": 0,
      "heart": 43,
      "rocket": 67,
      "eyes": 11
    },
    "mentions_count": 12
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/80420286",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/80420286/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/80420286/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.6.0",
    "id": 80420286,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4Eyx2-",
    "tag_name": "v1.6.0",
    "target_commitish": "main",
    "name": "v1.6.0 - Castle in the Sky",
    "draft": false,
    "prerelease": false,
    "created_at": "2022-10-20T07:30:34Z",
    "published_at": "2022-10-20T08:28:59Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.6.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.6.0",
    "body": "For the past months we've been working away at [SolidStart](https://start.solidjs.com) and that has led to some incredible exploration into the realm of islands, partial hydration, and hybrid routing. Solid 1.6 backfills that into the core so that other Solid projects can benefit.\r\n\r\nWe've also addressed a long-time issue with the proper merging of JSX spreads on native elements. When components don't re-execute dynamic spreads can one of the most complicated pieces to preserve granularity. Overall this is a smaller release but it represents a unique innovation into our vision of the future.\r\n\r\nSpecial thanks to @nksaraf and @rturnq work to guide exploration in these directions and contributions from @trusktr, @LiQuidProQuo, and @thetarnav \r\n\r\n## Highlights\r\n\r\n### Official Partial Hydration Support\r\n\r\nSolid has worked for quite some time in partial hydrated (\"Islands\") frameworks like Astro, Iles, Solitude, etc.. but now we have added core features to support this effort better. These features are mostly designed for meta-framework authors rather than the end user they are exposed through a couple APIs.\r\n\r\n`<Hydration />` joins `<NoHydration />` as being a way to resume hydration and hydration ids during server rendering. Now we can stop and start hydratable sections. This is important because it opens up a new optimization.\r\n\r\n`createResource` calls under non-hydrating sections do not serialize. That means that resources that are server only stay on the server. The intention is that hydrating Islands can then serialize their `props` coming in. Essentially only shipping the JSON for data actually used on the client. Reducing the double data problem significantly.\r\n\r\nThe power here is static markup can interleave dynamic components.\r\n\r\n```js\r\n<h1>Server Rendered Header</h1>\r\n<Island>\r\n  <h2>Server Rendered Sub Header</h2>\r\n  <p>{serverOnlyResource().text}</p>\r\n  <DifferentIsland>\r\n    <p>More server-renderd content</p>\r\n  </DifferentIsland>\r\n</Island>\r\n```\r\n\r\nKeep in mind Server rendered content like this can only be rendered on the server so maintaining client navigation with this paradigm requires a special router that handles HTML partials.\r\n\r\nSimilarly, we want the trees to talk to each other so `hydrate` calls now have been expanded to accept a parent `Owner` this will allow Islands to communicate through Contex without shipping the whole tree to the browser.\r\n\r\n```js\r\n<h1>Server Only Rendered Header</h1>\r\n<ClientProvider>\r\n  <h2>Server Only Rendered Sub Header</h2>\r\n  <ClientIslandThatReadsContext />\r\n</ClientProvider>\r\n```\r\n\r\nThese improvements make it easier to create Partial Hydration solutions on top of Solid, and serve to improve the capabilities of the ones we already have.\r\n\r\n### Native Spread Improvements\r\n\r\nNative spreads are something we started at very naively. Simply just iterating an object that has some reactive properties and updating the DOM element. However, this didn't take into consideration two problems.\r\n\r\nFirst properties on objects can change, they can be added or removed, and more so the object itself can be swapped. Since Solid doesn't re-render it needs to keep a fixed reference to the merged properties. Secondly, these are merged. Properties override others. What this means is we need to consider the element holistically to know that the right things are applied.\r\n\r\nFor Components, this was never a problem since they are just function calls. Unfortunately for native elements, this means all those compiler optimizations we do for specific bindings now need to get pulled into this. Which is why we avoided it in the past. But the behavior was too unpredictable.\r\n\r\nIn 1.6 we have smartened spread to merge properly using a similar approach to how we process Components.\r\n```js\r\n// A`class` property in `props` now takes priority even if someSignal() updates.\r\n// In fact it won't even be subscribed to unless props does not have a `class` property.\r\n<div class={someSignal()} {...props} />\r\n```\r\n\r\nWe've also found new ways to optimize the experience. (See below).\r\n\r\n## Other Improvements\r\n\r\n### Deproxification\r\n\r\nWorking on new Spread behavior we realized that while we can't tell from compilation which spreads can change. We can tell at runtime which are proxies. And in so if we only need to merge things that don't swap, and aren't proxies we can avoid making a Proxy.\r\n\r\nWhat is great about this is it has a cascading effect. If component props aren't a proxy, then `splitProps` and `mergeProps` don't need to create them, and so on. While this requires a little extra code it is a real win.\r\n\r\nWe get a lot requests for low-end IoT devices because of Solid's incredible performance. In tests, Solid outperforms many of the Virtual DOM solutions in this space. However, most of them don't support proxies.\r\n\r\nSo now if you don't use a `Store` or swap out the props object:\r\n\r\n```js\r\n// this is fine\r\n<div {...props} />\r\n\r\n// these could swap out the object so they make proxies\r\n<div {...props.something} />\r\n// or\r\n<div {...someSignal()} />\r\n```\r\nWe don't need to introduce any proxy the user didn't create. This makes Solid a viable option for these low-end devices.\r\n\r\n------------------------\r\n### Note on the title\r\n\r\nCastle in the Sky was a landmark film for director Hayao Miyazaki, the first created at their newly formed studio, Studio Ghibli back in 1985. I found the imagery of floating Islands irresistible in the sense with our client-routed Islands it is like pulling them out of the water.\r\n\r\nA \"Castle in the Sky\" also refers to an idealistic, almost unrealizable goal. I think our isomorphic ambition of where we are taking things in frontend development feels like that sometimes. Attempting to keep aloft balancing the restrictions of the weight of JavaScript, the desire for interactivity, and the polish of experience seamlessly across both platforms immediately brings to mind these floating structures. A Solarpunk-esque return to our roots in server rendering with advanced technology that attempts to make itself invisible.\r\n\r\nSo whether that is for you, Laputa, Skyloft, Zeal, Skypiea, Sanctaphrax, or some other, I wish you luck on your journey upwards.\r\n\r\nBest, @ryansolid \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/80420286/reactions",
      "total_count": 305,
      "+1": 87,
      "-1": 0,
      "laugh": 0,
      "hooray": 82,
      "confused": 0,
      "heart": 62,
      "rocket": 74,
      "eyes": 0
    },
    "mentions_count": 6
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/75446811",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/75446811/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/75446811/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.5.0",
    "id": 75446811,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4Efzob",
    "tag_name": "v1.5.0",
    "target_commitish": "main",
    "name": "v1.5.0 - Batch to the Future",
    "draft": false,
    "prerelease": false,
    "created_at": "2022-08-26T04:15:54Z",
    "published_at": "2022-08-26T08:44:21Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.5.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.5.0",
    "body": "The last couple of months has been about looking toward the future. With Solid 1.0 clearly in the rearview, we are preparing for the possibility of Solid 2.0. We've started the [working group](https://github.com/solidjs/solid-workgroup) to discuss new ideas and a lot of thought has been going into that future. At the same time, [SolidStart](https://github.com/solidjs/solid-start), our new full-stack starter is getting closer to its initial reveal we've learned a lot about server rendering that has made it back into the core.\r\n\r\nWe're very happy today to release the next version of Solid, thanks primarily to the contributions of @modderme123, @edemaine, @trusktr, @otonashixav, @lxsmnsyc, @LiQuidProQuo, @Drevoed, @nksaraf, @paoloricciuti, and @jorroll.\r\n\r\n## Key Highlights\r\n\r\n### New Batching Behavior\r\n\r\nSolid 1.4 patched a long-time hole in Solid's behavior. Until that point Stores did not obey batching. However, it shone a light on something that should maybe have been obvious before. Batching behavior that stays in the past is broken for mutable data. Solid only has `createMutable` and `produce` but with these sorts of primitives, the sole purpose is that you perform a sequence of actions, and batching this properly defies expectation. You wouldn't expect adding an element to an array and then removing another item to just skip the first operation, but that is proper behavior when values stay in the past.\r\n\r\n```js\r\nconst store = createMutable([\"a\", \"b\", \"c\"]);\r\n\r\nconst move = store.splice(1, 1);\r\nstore.splice(0, 0, ...move);\r\n\r\n// solid 1.4\r\n// [\"b\", \"a\", \"b\", \"c\"];\r\n\r\n// solid 1.5\r\n// [\"b\", \"a\", \"c\"];\r\n```\r\n\r\nAfter a bunch of careful thought and auditing, we decided that Solid's `batch` function should behave the same as how reactivity propagates in the system once a signal is set. As in we just add observers to a queue to run, but if we read from a derived value that is stale it will evaluate eagerly. In so signals will update immediately in a batch now and any derived value will execute on read. The only purpose of `batch` now is to group writes that begin outside of the reactive system, like in event handlers or async callbacks.\r\n\r\n### More Powerful Resources\r\n\r\nResources continue to get improvements. A common pattern in Islands frameworks like Astro is to fetch the data from the outside and pass it in. In this case, you wouldn't want Solid to do the resource fetching or the serialization on the initial server render, but you still may want to pass it to a resource so it updates on any change. For that to work reactivity needs to run in the browser. The whole thing has been awkward to wire up but no longer.\r\n\r\n`ssrLoadFrom` field lets you specify where the value comes from during ssr. The default is `server` which fetches on the server and serializes it for client hydration. But `initial` will use the `initialValue` instead and not do any fetching or additional serialization.\r\n\r\n```js\r\nconst [user] = createResource(fetchUser, {\r\n  initialValue: globalThis.DATA.user,\r\n  ssrLoadFrom: \"initial\"\r\n});\r\n```\r\n\r\nWe've improved TypeScript by adding a new `state` field which covers a more detailed view of the Resource state beyond `loading` and `error`. You can now check whether a Resource is `\"unresolved\"`, `\"pending\"`, `\"ready\"`, `\"refreshing\"`, or `\"error\"`.\r\n\r\n| state      | value resolved | loading | has error |\r\n| ---------- | -------------- | ------- | --------- |\r\n| unresolved | No             | No      | No        |\r\n| pending    | No             | Yes     | No        |\r\n| ready      | Yes            | No      | No        |\r\n| refreshing | Yes            | Yes     | No        |\r\n| errored    | No             | No      | Yes       |\r\n\r\nA widely requested feature has been allowing Resources to be stores. While higher-level APIs are still being determined we now have a way to plugin the internal storage by passing something with the signature of a signal to the new _Experimental_ `storage` option.\r\n\r\n```js\r\nfunction createDeepSignal<T>(value: T): Signal<T> {\r\n  const [store, setStore] = createStore({\r\n    value\r\n  });\r\n  return [\r\n    () => store.value,\r\n    (v: T) => {\r\n      const unwrapped = unwrap(store.value);\r\n      typeof v === \"function\" && (v = v(unwrapped));\r\n      setStore(\"value\", reconcile(v));\r\n      return store.value;\r\n    }\r\n  ] as Signal<T>;\r\n}\r\n\r\nconst [resource] = createResource(fetcher, {\r\n  storage: createDeepSignal\r\n});\r\n```\r\n\r\n### Consolidated SSR\r\n\r\nThis release marks the end of a several year long effort to merge async and streaming mechanisms. Since pre 1.0 these were separate. Solid's original SSR efforts used reactivity on the server with different compilations. It was easiest to migrate synchronous and streaming rendering and for a time async had a different compilation. We got them on the same compilation 2 years ago but the runtimes were different. Piece by piece things have progressed until finally async rendering is now the same code path as streaming if flushing was deferred until everything has completed.\r\n\r\nThis means some things have improved across the board. Async triggered Error Boundaries previously were only ever client rendered (throwing an error across the network), but now if they happen any time before sending to the browser they are server-rendered. `onCleanup` now runs on the server if a branch changes. Keep in mind this is for render effects and not true side effects as not all rendering cleans up.\r\n\r\nFinally, we've had a chance to do a bunch of SSR rendering performance improvements. Improved raw string rendering by about 8% and replaced our data serializer with an early copy of @DylanPiercey from [Marko](https://markojs.com)'s upcoming serializer for Marko 6 which boasts performance improvements of up to 6x over `devalue` which we used previously. Also, we streamlined asset and script insertion.\r\n\r\n### Keyed Control Flow\r\n\r\nSolid's `<Show>` and `<Match>` control flows were originally re-rendered based on value change rather than truthy-ness changing. This allowed the children to be \"keyed\" to the value but led to over rendering in common cases. Pre 1.0 it was decided to make these only re-render when statement changed from `true` to `false` or vice versa, except for the callback form that was still keyed.\r\n\r\nThis worked pretty well except it was not obvious that a callback was keyed. So in 1.5 we are making this behavior explicit. If you want keyed you should specify it via attribute:\r\n\r\n```js\r\n// re-render whenever user changes\r\n\r\n// normal\r\n<Show when={user()} keyed>\r\n  <div>{user().name}</div>\r\n</Show>\r\n\r\n// callback\r\n<Show when={user()} keyed>\r\n  {user => <div>{user.name}</div>}\r\n</Show>\r\n```\r\n\r\nHowever, to not be breaking if a callback is present we will assume it's keyed. We still recommend you start adding these attributes (and TS will fail without them).\r\n\r\nIn the future, we will introduce a non-keyed callback form as well so users can benefit from type narrowing in that case as well.\r\n\r\n## Other Improvements\r\n\r\n### `children.toArray`\r\n\r\nChildren helper now has the ability to be coerced to an array:\r\n\r\n```js\r\nconst resolved = children(() => props.children);\r\nresolved.toArray(); // definitely an array\r\n```\r\n\r\n### Better SSR Spreads\r\n\r\nFinally fixed spread merging with non-spread properties during SSR, including the ability to merge children.\r\n\r\n### Better Error Handling\r\n\r\nWe weren't handling falsey errors previously. Now when Solid receives an error that isn't an `Error` object or a string it will coerce it into an `Unknown Error`.\r\n\r\n### Migrated the Repo to pnpm and TurboRepo\r\n\r\nThanks @modderme123 for taking the time to completely modernize our build setup. Making it way easier to contribute and drastically improve build and testing performance.\r\n\r\n### NodeNext Support\r\n\r\nTypeScript 4.7 brought a new way to use package exports to resolve Types and with Solid 1.5 we now support this.\r\n\r\n### Improved Tagged Template Literals\r\n\r\nMany fixes have been made to Tagged Template literal parsing (special thanks @trusktr) fixing many rough edges.\r\n\r\n### Improved CSS Types\r\n\r\nSolid now uses `csstype` for better typing of the style property.\r\n\r\n### `in` support in Stores\r\n\r\nThe `in` operator is now tracked and auto-wrapped in the JSX.\r\n\r\n### Bug fixes\r\n\r\nMany small bug fixes, including:\r\n* fragment hydration mismatch\r\n* head/body elements included in templates\r\n* comparison functions not called with no observers\r\n* scheduling error in concurrent rendering\r\n* deletion on createMutable\r\n\r\n--------------\r\nAs always thanks to everyone involved who contributed, not only to the repos but the countless discussions across Github and Discord. Not everything ended up getting in this round and we had some difficult decisions like reviewing writing symbols to stores, and consistency of boolean attributes. Even if we landed on no change these discussions they served to re-enforce the good patterns we have in Solid today and gave a lot of insight into what we can do in the future.\r\n\r\nSincerely,\r\n@ryansolid\r\n\r\n*I apologize for the terrible pun*",
    "discussion_url": "https://github.com/solidjs/solid/discussions/1181",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/75446811/reactions",
      "total_count": 297,
      "+1": 87,
      "-1": 0,
      "laugh": 0,
      "hooray": 78,
      "confused": 0,
      "heart": 69,
      "rocket": 63,
      "eyes": 0
    },
    "mentions_count": 12
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/66733986",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/66733986/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/66733986/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.4.0",
    "id": 66733986,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4D-kei",
    "tag_name": "v1.4.0",
    "target_commitish": "main",
    "name": "v1.4.0 - Level Up!",
    "draft": false,
    "prerelease": false,
    "created_at": "2022-05-12T18:33:05Z",
    "published_at": "2022-05-12T20:06:15Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.4.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.4.0",
    "body": "This release has been a long time coming. 1.3 brought a ton of new features and a ton of new bugs that have been ironed out in the last couple of months. SolidHack also ran over this time where we got see people pushing the limits of what can be done. We've taken the feedback and applied it to our messaging, documentation, and our roadmap.\r\n\r\nv1.4 addresses some of these allowing people to do more with the features we already have. It may not have as many new toys to play with, but it makes significant improvements to how we use Stores, Resources, and Streaming.\r\n\r\nThere also has been an incredible amount of work on TypeScript. So much so that I can't even include all the improvements in this post. Huge thanks goes out to @otonashixav, @trusktr, @edemaine, as well as review by @atk, @high1, and others to help see these landed.\r\n\r\n## New Features\r\n\r\n### Top Level Arrays in Stores\r\n\r\nSince Stores were first introduced it has always bugged me that the most common case, creating a list, required nesting it under a property to track properly. Thanks to some exploration into proxy traps and iteration we now support top-level arrays. In addition to its other modes, the Store setter will accept an array that allows for common operations.\r\n\r\n```js\r\nconst [todos, setTodos] = createStore([\r\n  { id: 1, title: \"Thing I have to do\", done: false },\r\n  { id: 2, title: \"Learn a New Framework\", done: false }\r\n]);\r\n\r\n// set at an index\r\nsetTodos(1, done, true);\r\n\r\n// use an array\r\nsetTodos([...todos, { id: 3, title: \"New Todo\", done: false }])\r\n\r\n// iterate over it with <For>\r\n<For each={todos}>{todo => <Todo todo={todo} />}</For>;\r\n```\r\n\r\nThrough this change, we also stopped over execution when listening to specific properties. To support iteration Solid previously would notify the owning object of an array when any index was added/removed or object when a new property was created or a property was deleted.\r\n\r\nThe one caveat is downstream optimized control flow that untrack index reads on arrays will now need to track the iterated object explicity. Solid exports a `$TRACK` symbol used to subscribe to the object and all its properties.\r\n\r\n### Resource Deferred Streaming\r\n\r\nStreaming brings a lot of performance benefits but it also comes with the tradeoff we need to respond with the headers before we can send any content. This means we must set the Response headers early if we want to benefit from streaming. While it's always possible to fetch first and delay rendering that slows down everything. Even our async server rendering doesn't block rendering but instead just waits to respond to the end.\r\n\r\nBut what if you want to stream but also want to wait on some key data loading so you still have an opportunity to handle the response on the server before sending it to the browser?\r\n\r\nWe now have the ability to tell Solid's stream renderer to wait for a resource before flushing the stream. That you can opt-in by setting `deferStream` option.\r\n\r\n```js\r\n// fetches a user and streams content as soon as possible\r\nconst [user] = createResource(() => params.id, fetchUser);\r\n\r\n// fetches a user but only streams content after this resource has loaded\r\nconst [user] = createResource(() => params.id, fetchUser, { deferStream: true });\r\n```\r\n\r\nWhen this happens the stream and the response will be held allowing the server to process what it needs to before sending the status and streaming back the response. This is also valuable if there is some high-priority content that is worth waiting for before sending the response.\r\n\r\n### Stale Resource Reads\r\n\r\nSuspense and Transitions are amazingly powerful features but occasionally you want to opt-out of the consistency and show things out of date because it will show up faster and some of the things you are waiting for are not as high priority. In so you want the Transition to end sooner, but not necessarily stop showing the stale data for part of the screen. It is still preferable to receding back to loading spinner state.\r\n\r\nSolid's Resources now support being able to read the value without triggering Suspense. As long as it has loaded previously `latest` property won't cause fallback to appear or Transitions to hold. This will always return the `latest` value regardless of whether it is stale (ie.. a new value is being fetched) and will reactively update. This is super powerful in Transitions as you can use the Resource's own `loading` state to know if it is stale. Since the Transition will hold while the critical data is loading, the loading state will not be applied to the in view screen until that Transition has ended. If the resource is still loading now you can show that it is stale.\r\n\r\n```js\r\nconst [resource] = createResource(source, fetcher)\r\n\r\n// read it as usual\r\nresource();\r\n\r\n// read the latest (don't suspend if loaded at least once)\r\nresource.latest;\r\n```\r\n\r\nExample: https://codesandbox.io/s/solid-stale-resource-y3fy4l\r\n\r\n### Combining multiple Custom Renderers\r\n\r\nThe Babel plugin now allows configuring multiple custom renderers at the same time. The primary case it is so a developer can still lever Solid's optimized DOM compilation while using their custom renderer. To make this work specify the tags each renderer is reponsible for. It will try to resolve them in order.\r\n\r\n```js\r\nimport { HTMLElements, SVGElements } from \"solid-js/web\";\r\nlet solidConfig = {\r\n  moduleName: \"solid-js/web\",\r\n  // @ts-ignore\r\n  generate: \"dynamic\",\r\n  renderers: [\r\n    {\r\n      name: \"dom\",\r\n      moduleName: \"solid-js/web\",\r\n      elements: [...HTMLElements, ...SVGElements]\r\n    },\r\n    {\r\n      name: \"universal\",\r\n      moduleName: \"solid-three\",\r\n      elements: []\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\nCredit for this goes to @nksaraf who has been working on weaving Solid's optimal DOM compiler with a custom Three.js compiler.\r\n\r\n## Improvements/Fixes\r\n\r\n### Synchronous Top Level `createEffect`\r\n\r\nThese were originally deferred to a microtask to resemble how effects are queued under a listener. However it is more correct to run immediately like everything else top level.\r\n\r\n### Better Types around Components\r\n\r\nThis one took the effort of many resident TypeScript experts, but we've now landed on some better types for components. The biggest change is `Component` no longer has an opinion on whether it should have `children` or not. We've added supplementary types `ParentComponent` and `FlowComponent` to denote Components that may have `children` or always have `children`. And we've added `VoidComponent` for those which may never have children.\r\n\r\n### Sources in `createResource` are now Memos\r\n\r\nA small change but it was unusual to have refetching trigger a reactive expression outside of a reactive context. Now on refetch it grabs the last source value rather than re-running it.\r\n\r\n### Better handling of `null` and `undefined`\r\n\r\nSpreads and classes in the JSX now handle these values without writing them as strings or throwing exceptions.\r\n\r\n### `createMutable` batches array methods like push, pop, etc..\r\n\r\nNow these built-ins are batched and more performant. For instance using `push` or `splice` will only trigger updates once.\r\n\r\nWe've also added `modifyMutable` that applies modifiers batched to stores created with `createMutable`.\r\n\r\n```js\r\nmodifyMutable(state.data.user, reconcile({ firstName: \"Jake\", middleName: \"R\" }));\r\n```\r\n\r\n### Better Support for React JSX transform\r\n\r\nWe have added support to `solid-js/h` to support the new React JSX transform. You can use it directly in TypeScript by using:\r\n```json\r\n{\r\n  \"jsx\": \"react-jsx\",\r\n  \"jsxImportSource\": \"solid-js/h\"\r\n}\r\n```\r\nKeep in mind this has all the consequences of not using the custom transform. It means larger library code, slower performance, and worse ergonomics. If you use this remember to wrap your reactive expressions in functions.\r\n\r\n### HyperScript now returns functions\r\n\r\nThis one is a potentially breaking change, but the current behavior was broken in a different way. It was possible(and common) for children to be created before the parents the way JSX worked. This was an oversight on my original design that needs to be fixed, as it breaks context, and disposal logic. So now when you get your results back from `h` you need to call it. Solid's `render` function will handle this automatically.\r\n\r\n```js\r\nconst getDiv = h(\"div\", \"Hello\");\r\n\r\ndocument.body.appendChild(getDiv()); // call as a function to have it create the element.\r\n```\r\n\r\nSpecial thanks to @fabiospampinato for identifying and bringing this long-standing issue to our attention.\r\n\r\n## Removals and Deprecations\r\n\r\n### `className`, `htmlFor` deprecated\r\n\r\nWhile they still work for now, Solid will remove support for these React-isms in a future version. They leave us with multiple ways to set the same attribute. This is problematic for trying to merge them. Solid updates independently so it is too easy for these things to trample on each other. Also when optimizing for compilation since with things like Spreads you can't know if the property is present, Solid has to err on the side of caution. This means more code and less performance.\r\n\r\n### Experimental `refetchResources` removed\r\n\r\nThis primitive ended up being too general to be useful. There are enough cases we can't rely on the refetch everything by default mentality. For that reason, we are dropping support for this experimental feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/66733986/reactions",
      "total_count": 216,
      "+1": 30,
      "-1": 0,
      "laugh": 15,
      "hooray": 42,
      "confused": 0,
      "heart": 67,
      "rocket": 57,
      "eyes": 5
    },
    "mentions_count": 7
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/56525505",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/56525505/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/56525505/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.3.0",
    "id": 56525505,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4DXoLB",
    "tag_name": "v1.3.0",
    "target_commitish": "main",
    "name": "v1.3.0 - Spice Must Flow",
    "draft": false,
    "prerelease": false,
    "created_at": "2022-01-06T07:14:48Z",
    "published_at": "2022-01-06T10:25:14Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.3.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.3.0",
    "body": "This release is a big one. It really focuses on improving Server Side Rendering. We add support for Streaming HTML, Isomorphic Error Boundaries, and Multiple Async Hydration Roots. We also made some small tweaks to resources to make it easier than ever to build powerful query caching solutions on top of them. And we have started experimenting with supporting even more types of reactivity.\r\n\r\nThere are a lot of new features in this release many experimental. So feedback is very appreciated. There also are a few small API changes in this release to facilitate future features, so be sure to read the breaking changes below.\r\n\r\n## New Features\r\n\r\n### HTML Streaming\r\n\r\nThis release adds support for HTML streaming. Now we not only stream data after the initial shell but the HTML as it finishes. The big benefit is that now for cached results or times when the network is slow, we no longer have to show the placeholder while waiting for the JavaScript bundle to load. As soon as the HTML is available it will be streamed and inserted.\r\n\r\nWith it comes a new streaming API `renderToStream`. This is a universal API designed to handle both Node and Web writable streams. It returns an object that mirrors a Readable stream on both platforms that has both `pipe` (node) and `pipeTo` (web). The benefit of this `pipe` API is the user can choose when to insert the content in the output stream whether soon as possible, or `onCompleteShell`, or `onCompleteAll`. This decouples Solid's rendering from the stream a bit but leaves things open to performance improvements in the future.\r\n\r\n```js\r\n// node\r\nconst stream = renderToStream(() => <App />).pipe(res);\r\n\r\n// web\r\nconst stream = renderToStream(() => <App />).pipeTo(writable);\r\n```\r\n\r\n### Error Boundaries on the Server\r\n\r\nWe've added support for Error Boundaries on the Server for all rendering methods(`renderToString`, `renderToStringAsync`, `renderToStream`). Errors can be caught both from synchronous rendering and from errors that happen in Resource resolution. However, Our approach doesn't guarantee all errors are handled on the server as with streaming it is possible that the Error Boundary has already made it to the browser while a nested Suspense component hasn't settled. If an Error is hit it will propagate up to the topmost Suspense Boundary that hasn't been flushed yet. If it is not handled by an Error Boundary before that it will abort rendering, and send the Error to the browser to propagate up to the nearest Error Boundary.\r\n\r\nThis works now but there is more to explore here in improving Error handling in general with SSR. So look forward to feedback on the feature.\r\n\r\n### Isolated Server Render/Hydration Contexts\r\n\r\nSometimes you want to server render and hydrate multiple Solid apps on the same page. Maybe you are using the Islands architecture with something like [Astro](https://astro.build). We now have the ability to pass a unique `renderId` on all our server rendering methods and to the `hydrate` function. This will isolate all hydration and resource resolution. This means we can use things like server side Suspense in these solutions.\r\n\r\nAlso now you only need to include the Hydration Script once on the page. Each Island will be responsible for initializing it's own resources.\r\n\r\n```js\r\n// on the server\r\nconst html = renderToString(() => <Island1 />, { renderId: \"island1\" });\r\n\r\n// for the browser\r\nhydrate(() => <Island1 />, mountEl, { renderId: \"island1\" });\r\n```\r\n\r\n### `createReaction`\r\n\r\nThis new primitive is mostly for more advanced use cases and is very helpful for interopt with purely pull based systems (like integrating with React's render cycle). It registers an untracked side effect and returns a tracking function. The tracking function is used to track code block, and the side effect is not fired until the first time any of the dependencies in the tracking code is updated. `track` must be called to track again.\r\n\r\n```js\r\nconst [s, set] = createSignal(\"start\");\r\n\r\nconst track = createReaction(() => console.log(\"something\"));\r\n\r\n// next time s changes run the reaction\r\ntrack(() => s());\r\n\r\nset(\"end\"); // \"something\"\r\n\r\nset(\"final\"); // no-op as reaction only runs on first update, need to call track again.\r\n```\r\n\r\nThis primitive is niche for certain use cases but where it is useful it is indispensible (like the next feature which uses a similar API).\r\n\r\n### External Sources (experimental)\r\n\r\nEver wanted to use a third party reactive library directly in Solid, like MobX, Vue Reactivity, or Kairo. We are experimenting with adding native support so reactive atoms from these libraries can be used directly in Solid's primitives and JSX without a wrapper. This feature is still experimental since supporting Transitions and Concurrent Rendering will take some more effort. But we have added `enableExternalSource` enable this feature. Thanks @3Shain for designing this solution.\r\n\r\n```js\r\nimport { Reaction, makeAutoObservable } from \"mobx\";\r\nimport { enableExternalSource } from \"solid-js\";\r\nimport { render } from \"solid-js/web\";\r\n\r\nlet id = 0;\r\nenableExternalSource((fn, trigger) => {\r\n  const reaction = new Reaction(`externalSource@${++id}`, trigger);\r\n  return {\r\n    track: x => {\r\n      let next;\r\n      reaction.track(() => (next = fn(x)));\r\n      return next;\r\n    },\r\n    dispose: () => {\r\n      reaction.dispose();\r\n    }\r\n  };\r\n});\r\n\r\nclass Timer {\r\n  secondsPassed = 0;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  increase() {\r\n    this.secondsPassed += 1;\r\n  }\r\n\r\n  reset() {\r\n    this.secondsPassed = 0;\r\n  }\r\n}\r\n\r\n// component driven directly off MobX\r\nfunction App() {\r\n  const timer = new Timer();\r\n  setInterval(() => {\r\n    timer.increase();\r\n  }, 1000);\r\n\r\n  return <button onClick={() => timer.reset()}>Seconds passed: {timer.secondsPassed}</button>;\r\n}\r\n\r\nrender(() => <App />, document.getElementById(\"app\"));\r\n```\r\n\r\n### `refetchResources` (experimental)\r\n\r\nIn efforts to allow for scaling from simple resources up to cached solutions we are adding some experimental features to `createResource` to work with library writers to develop the best patterns. Caching is always a tricky problem and with SSR and streaming being part of the equation the core framework needs at minimum to provide some hooks into orchestrating them.\r\n\r\nSometimes it's valuable to trigger `refetch` across many resources. Now you can.\r\n\r\n```js\r\nimport { createResource, refetchResources } from \"solid-js\";\r\n\r\nconst userCache = {};\r\n\r\nfunction MyComponent(props) {\r\n  const [data] = createResource(\r\n    () => props.id,\r\n    (userId, { refetching }) => {\r\n      const cached = userCache[userId];\r\n\r\n      // return cached value if available and not refetching\r\n      if (cached && !refetching) return cached;\r\n      return fetchUser(userId);\r\n    }\r\n  );\r\n}\r\n\r\n// somewhere else\r\nrefetchResources();\r\n```\r\n\r\nYou can also pass a parameter to `refetchResources` to provide additional information to the `refetching` info of the fetcher. This could be used for conditional cache invalidation. Like only refetch resources related to `users`. This mechanism requires a bit of wiring but the idea is you'd wrap `createResource` in maybe a `createQuery` and implement your own conventions around resource cache management. Still working out how this should work best, but the goal is to provide the mechanisms to support resource caches without being responsible for their implementation.\r\n\r\nTo opt-out being part of the global refetch createResource now takes a `globalRefetch` option that can be set to false. In addition to a new option to disable `refetchResources` there is no an `onHydrated` callback that takes the same arguments as the fetcher. When a resource is restored from the server the fetcher is not called. However, this callback will be. This is useful for populating caches.\r\n## Improvements\r\n\r\n### Better TypeScript Support\r\n\r\nThanks to the tireless efforts of several contributors we now have significantly better types in Solid. This was a huge effort and involved pulling in maintainers of TypeScript to help us work through it. Thank you @trusktr for spearheading the effort.\r\n### Better SourceMaps\r\n\r\nWork has been done to improve sourcemaps by updating `babel-plugin-dom-expressions` to better preserve identifiers from the JSX. Thanks to @LXSMNSYC for exploring and implementing this.\r\n\r\n## Breaking Changes/Deprecations\r\n\r\n### `startTransition` no longer takes callback as a second argument\r\n\r\nInstead it returns a promise you can await. This works better for chaining sequences of actions.\r\n\r\n```js\r\nconst [start, isPending] = useTransition();\r\n\r\nstart(() => doSomething()).then(() => allDone());\r\n```\r\n\r\n### Resource fetcher info object replaces `getPrev`\r\n\r\nTo streamline API for refetch we are slightly updating the `createResource`:\r\n\r\n```js\r\nconst [data] = createResource(sourceSignal, (source, { value, refetching }) => {});\r\n```\r\n\r\nFor those using existing 2nd argument:\r\n\r\n```js\r\nconst [data] = createResource(sourceSignal, (source, getPrev) => {\r\n  const value = getPrev();\r\n});\r\n\r\n// becomes\r\nconst [data] = createResource(sourceSignal, (source, { value }) => {});\r\n```\r\n\r\n### Deprecating Legacy Streaming APIs\r\n\r\n`pipeToNodeWritable` and `pipeToWritable` are deprecated. They will still work for now with basic usage but some of the more advanced options didn't map over to the new APIs directly and have been removed. Move to using `renderToStream`.\r\n\r\n## Bug Fixes\r\n\r\n- Fixed browser extensions modifying the head element breaking hydration.\r\n- Fixed reinserting `<html>` on hydration from document.\r\n- Fixed over-executing on multi-select with `createSelector`.\r\n- Fixed event delegation conflicting with document event listeners.\r\n- Fixed self owning source infinite recursion.\r\n- Fixed faulty treesplitting for hydration in client only render.\r\n- Fixed return type of `preload` on lazy components to always be a promise.\r\n- Fixed compile error with leading white space after opening tags when generating ssr.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/56525505/reactions",
      "total_count": 122,
      "+1": 12,
      "-1": 0,
      "laugh": 4,
      "hooray": 47,
      "confused": 0,
      "heart": 24,
      "rocket": 32,
      "eyes": 3
    },
    "mentions_count": 3
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/52029158",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/52029158/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/52029158/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.2.0",
    "id": 52029158,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "RE_kwDOB80jds4DGebm",
    "tag_name": "v1.2.0",
    "target_commitish": "main",
    "name": "v1.2.0 - Masters of the Universe",
    "draft": false,
    "prerelease": false,
    "created_at": "2021-10-26T06:50:36Z",
    "published_at": "2021-10-26T07:04:52Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.2.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.2.0",
    "body": "This release centers around the addition of the universal JSX transform and runtime generator to enable custom renderers. This opens up whole new worlds of possibility with the opportunity to support new platforms beyond the web.\r\n\r\n### New Features\r\n\r\n#### Custom Renderers\r\n\r\nThis release adds support custom renderers through a new \"universal\" transform. Solid now provides a sub module `solid-js/universal` that exports a `createRenderer` method that allows you to create your own runtimes. This will enable things like native mobile and desktop, canvas and webgl, or even rendering to the terminal. This is still new so very much looking for feedback.\r\n\r\n```js\r\n// example custom dom renderer\r\nimport { createRenderer } from \"solid-js/universal\";\r\n\r\nconst PROPERTIES = new Set([\"className\", \"textContent\"]);\r\n\r\nexport const {\r\n  render,\r\n  effect,\r\n  memo,\r\n  createComponent,\r\n  createElement,\r\n  createTextNode,\r\n  insertNode,\r\n  insert,\r\n  spread,\r\n  setProp,\r\n  mergeProps\r\n} = createRenderer({\r\n  createElement(string) {\r\n    return document.createElement(string);\r\n  },\r\n  createTextNode(value) {\r\n    return document.createTextNode(value);\r\n  },\r\n  replaceText(textNode, value) {\r\n    textNode.data = value;\r\n  },\r\n  setProperty(node, name, value) {\r\n    if (name === \"style\") Object.assign(node.style, value);\r\n    else if (name.startsWith(\"on\")) node[name.toLowerCase()] = value;\r\n    else if (PROPERTIES.has(name)) node[name] = value;\r\n    else node.setAttribute(name, value);\r\n  },\r\n  insertNode(parent, node, anchor) {\r\n    parent.insertBefore(node, anchor);\r\n  },\r\n  isTextNode(node) {\r\n    return node.type === 3;\r\n  },\r\n  removeNode(parent, node) {\r\n    parent.removeChild(node);\r\n  },\r\n  getParentNode(node) {\r\n    return node.parentNode;\r\n  },\r\n  getFirstChild(node) {\r\n    return node.firstChild;\r\n  },\r\n  getNextSibling(node) {\r\n    return node.nextSibling;\r\n  }\r\n});\r\n```\r\n\r\nWorking example [here](https://codesandbox.io/s/custom-dom-renderer-yu2pj).\r\n\r\n#### Spreads Added to Solid's `html`\r\n\r\nIt's been a long time coming but Solid's Tagged Template Literals now support element and component spreads using htm inspired syntax.\r\n```js\r\nhtml`<div ...${props} />`\r\n```\r\n\r\n### Fixes\r\n\r\n#### Dynamic Spreads now work on Components\r\n\r\nPreviously spreads on components would only track property changes on bound objects and not when the whole object changed. This now works:\r\n```js\r\n<MyComponent {...getStuff()} />\r\n```\r\n\r\n#### ClassList properly merges multiple classnames in the key\r\n\r\nIt is common in libraries like Tailwind to apply multiple classes at the same time. There was an issue where true and false resolutions were cancelling each other out. This would only set `text-sm`.\r\n\r\n```js\r\n<div\r\n  classList={{\r\n    \"px-2.5 py-1.5 text-xs\": false,\r\n    \"px-3 py-2 text-sm\": false,\r\n    \"px-4 py-2 text-sm\": true,\r\n    \"px-4 py-2 text-base\": false,\r\n    \"px-6 py-3 text-base\": false\r\n  }}\r\n/>\r\n```\r\n#### Consistent handling of HTMLEntities\r\n\r\nThings like `&nbsp;` used to render differently depending if in elements or components(or fragments). This has been made consistent across all three.\r\n\r\n#### Various improvements to Types and Transitions\r\n\r\nA lot of bugs from the last minor release were around Transitions that have been addressed. And as always Types have been gradually improving.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/52029158/reactions",
      "total_count": 141,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 49,
      "confused": 0,
      "heart": 39,
      "rocket": 53,
      "eyes": 0
    }
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/47523843",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/47523843/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/47523843/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.1.0",
    "id": 47523843,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTQ3NTIzODQz",
    "tag_name": "v1.1.0",
    "target_commitish": "main",
    "name": "V1.1.0 - Interrupting Cow",
    "draft": false,
    "prerelease": false,
    "created_at": "2021-08-09T09:22:51Z",
    "published_at": "2021-08-09T09:34:36Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.1.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.1.0",
    "body": "Expanding Solid's concurrency to include interruptible scheduling. Bug fixes around Types and around reactive execution order guarantees.\r\n\r\n### New Features\r\n\r\n### `createUniqueId`\r\n\r\nA universal id generator that works across server/browser.\r\n\r\n```js\r\nconst id = createUniqueId();\r\n```\r\n\r\n> **Note** on the server this only works under hydratable components\r\n\r\n### `from`\r\n\r\nA simple helper to make it easier to interopt with external producers like RxJS observables or with Svelte Stores. This basically turns any subscribable (object with a `subscribe` method) into a Signal and manages subscription and disposal.\r\n\r\n```js\r\nconst signal = from(obsv$);\r\n```\r\n\r\nIt can also take a custom producer function where the function is passed a setter function returns a unsubscribe function:\r\n\r\n```js\r\nconst clock = from(set => {\r\n  const t = setInterval(() => set(1), 1000);\r\n  return () => clearInterval(t);\r\n});\r\n```\r\n\r\n> Note: Signals created by `from` have equality checks turned off to interface better with external streams and sources.\r\n\r\n### `enableScheduling` (experimental)\r\n\r\nBy default, Solid's concurrent rendering/Transitions doesn't schedule work differently and just runs synchronously. Its purpose is to smooth out IO situations like Navigation. However, now you can opt into interruptible scheduling similar to React's behavior by calling this once at your program's entry. I've yet to see a realworld scenario where this makes a big difference but now we can do cool demos too and start testing it.\r\n\r\n#### `startTransition`\r\n\r\nWorks like its counterpart in `useTransition`, this useful when you don't need pending state.\r\n\r\n```js\r\nimport { createSignal, startTransition } from \"solid-js\";\r\n\r\nfunction App() {\r\n  const [signal, setSignal] = createSignal(\"Howdy\");\r\n  function clickHandler(e) {\r\n    startTransition(() => setSignal(\"Holla\"));\r\n  }\r\n\r\n  /* ...stuff */\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/47523843/reactions",
      "total_count": 84,
      "+1": 10,
      "-1": 0,
      "laugh": 2,
      "hooray": 48,
      "confused": 0,
      "heart": 5,
      "rocket": 17,
      "eyes": 2
    }
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/45360954",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/45360954/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/45360954/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v1.0.0",
    "id": 45360954,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTQ1MzYwOTU0",
    "tag_name": "v1.0.0",
    "target_commitish": "main",
    "name": "v1.0.0 - Solid grows up",
    "draft": false,
    "prerelease": false,
    "created_at": "2021-06-28T05:32:18Z",
    "published_at": "2021-06-28T14:20:59Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v1.0.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v1.0.0",
    "body": "Well, the time has come. We're happy to announce Solid 1.0. This is the culmination of 5+ years of work, but in another sense this is just the start. We have marked the APIs as stable(except for a couple that have `(experimental)` next to them, like SuspenseList). What started as a quest to show that reactivity still had it has become a fully-featured JavaScript UI Framework.\r\n\r\nWhile the 1.0 release doesn't bring behavior differences it does bring some breaking syntax changes. We've worked to make the simple Signals and our proxy objects have a more consistent API. And we've move the proxies out into their own sub module, renaming them from \"State\" to \"Store\". We feel this will reduce confusion and better reflect their purpose.\r\n\r\nThere is only a single 1.0.0 release, the first major version, and I am so happy and thankful to be here. Everyone who has been instrumental in us getting here has my eternal gratitude. From those who were always ready with encouraging words, to the great group of contributors and core maintainers we've built up today.\r\n\r\nSo thank you, and enjoy.\r\n\r\n## Breaking Changes\r\n\r\n### setSignal now supports function form\r\n\r\nWhile that in itself is a great new feature as you can do:\r\n```js\r\nconst [count, setCount] = createSignal(0);\r\n\r\nsetCount(c => c + 1);\r\n```\r\nThis promotes immutable patterns, lets you access the previous value without it being tracked, and makes Signals consistent with State.\r\n\r\nIt means that when functions are stored in signals you need to use this form to remove ambiguity\r\n```js\r\nconst [count, setCount] = createSignal(ComponentA);\r\n\r\n// Do this:\r\nsetCount(() => ComponentB);\r\n\r\n// Don't do this as it will call the function immediately:\r\nsetCount(ComponentB);\r\n```\r\nhttps://github.com/solidjs/solid/blob/main/documentation/api.md#createsignal\r\n\r\n### `createState` moved and renamed\r\n\r\n`createState` has been renamed to `createStore` and moved to `solid-js/store`. Also moved to `solid-js/store`: `createMutable`, `produce`, `reconcile`\r\n\r\nhttps://github.com/solidjs/solid/blob/main/documentation/api.md#createstore\r\n\r\n### SSR Entry points\r\n\r\n`renderToString` and `renderToStringAsync` now only return their stringified markup. To insert scripts you need to call `generateHydrationScript` or use the new `<HydrationScript>` component.\r\n\r\n`renderToNodeStream` and `renderToWebStream` have been replaced with `pipeToNodeWritable` and `pipeToWritable`, respectively.\r\n\r\nhttps://github.com/solidjs/solid/blob/main/documentation/api.md#pipetonodewritable\r\n\r\n### Options Objects\r\n\r\nMost non-essential arguments on reactive primitives are now living on an options object. This was done to homogenize the API and make it easier to make future additions while remaining backwards compatible.\r\n\r\n### on\r\n\r\nNo longer uses rest parameters for multiple dependencies. Instead, pass an array. This facilitates new option to defer execution until dependencies change.\r\n\r\nhttps://github.com/solidjs/solid/blob/main/documentation/api.md#on\r\n\r\n### Actions renamed to Directives\r\n\r\nTo remove future confusion with other uses of actions the `JSX.Actions` interface is now the `JSX.Directives` interface.\r\n\r\nhttps://github.com/solidjs/solid/blob/main/documentation/api.md#use___",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/45360954/reactions",
      "total_count": 198,
      "+1": 50,
      "-1": 0,
      "laugh": 4,
      "hooray": 67,
      "confused": 0,
      "heart": 30,
      "rocket": 37,
      "eyes": 10
    }
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/41217950",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/41217950/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/41217950/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.26.0",
    "id": 41217950,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTQxMjE3OTUw",
    "tag_name": "v0.26.0",
    "target_commitish": "main",
    "name": "v0.26.0 - Call You, Maybe",
    "draft": false,
    "prerelease": false,
    "created_at": "2021-04-10T08:28:26Z",
    "published_at": "2021-04-10T08:31:51Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.26.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.26.0",
    "body": "This release is about finalizing some API changes on the road to 1.0. This one has one breaking change and not much else.\r\n\r\n### Signals no longer always notify by default\r\n\r\nSolid's original behavior has been to always notify on signal change even if the value hasn't changed. The idea was to simulate stream behavior. However, this has some downsides:\r\n\r\n1. Inconsistent with State.. I made the decision to make state equality check by default, it is weird signals and memo's do not.\r\n2. More likely to hit infinite loops. Equality check naturally stops infinite loops in some cases. While infinite loops aren't good and code that produces them suspect, it is nice to keep things clean.\r\n3. It is consistent with other modern reactive libraries like MobX and Vue.\r\n\r\nThe API has not changed. You can opt out of the default behavior by passing in your own comparator or false to the 2nd parameter of `createSignal` and the 3rd parameter of `createMemo`.\r\n\r\nMy hope this is the last release before I start making 1.0 RC's. This one has big enough impact I want to get this out first. I imagine the remaining changes will be just syntax.",
    "reactions": {
      "url": "https://api.github.com/repos/solidjs/solid/releases/41217950/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    }
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/40622180",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/40622180/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/40622180/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.25.0",
    "id": 40622180,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTQwNjIyMTgw",
    "tag_name": "v0.25.0",
    "target_commitish": "main",
    "name": "v0.25.0 - Master -> Main",
    "draft": false,
    "prerelease": false,
    "created_at": "2021-03-29T09:14:03Z",
    "published_at": "2021-03-29T09:17:30Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.25.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.25.0",
    "body": "This release is about refining the the APIs as we approach the our release candidate for 1.0. And moving from `master` to `main`.\r\n\r\n### Breaking Changes\r\n\r\n#### Resource API\r\n\r\nMinor difference to allow the first argument to be optional and support more features in the future. New full signature is:\r\n\r\n```ts\r\nexport function createResource<T, U>(\r\n  fn: U | false | (() => U | false),\r\n  fetcher: (k: U, getPrev: () => T | undefined) => T | Promise<T>,\r\n  options?: { initialValue?: T }\r\n): ResourceReturn<T>;\r\n```\r\n\r\n3rd argument is now an options object instead of just the initial value. This breaking. But this also allows the first argument to be optional for the non-tracking case. Need a promise that only loads once? Don't have need to re-use the fetcher. Do this:\r\n\r\n```js\r\nconst [data] = createResource(\r\n  async () => (await fetch(`https://someapi.com/info`)).json()\r\n);\r\n```\r\n\r\n#### on/onCapture\r\n\r\nThese are an escape hatch for unusual events. Previously these were custom attributes but now they are namespaced like:\r\n```jsx\r\n<div on:someUnusualEvent={e => console.log(e.target)} />\r\n```\r\n\r\n#### change `main` field to be node\r\n\r\nNow that we are supporting SSR for legacy(non-ESM) systems I need to use the main field to indicate a node env. We will be using the \"browser\" field for the client build in Solid. This straight up breaks Jest which doesn't respect that. I've created `solid-jest` to handle this.\r\n\r\nhttps://github.com/ryansolid/solid-jest\r\n\r\n### New Features\r\n\r\n#### Namespace Types\r\nTypes added for Namespace attributes. You probably won't need most of these because they are for more advanced usage. However to use them you need to extend the JSX Namespace:\r\n\r\n```ts\r\ndeclare module \"solid-js\" {\r\n  namespace JSX {\r\n    interface Actions {  // use:____\r\n\r\n    }\r\n    interface ExplicitProperties { // prop:____\r\n\r\n    }\r\n    interface ExplicitAttributes { // attr:____\r\n\r\n    }\r\n    interface CustomEvents { // on:____\r\n\r\n    }\r\n    interface CustomCaptureEvents { // oncapture:____\r\n\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Lazy component preload\r\nLazy components now have a preload function so you can pre-emptively load them.\r\n```js\r\nconst LazyComp = lazy(() => import(\"./some-comp\"))\r\n\r\n// load ahead of time\r\nLazyComp.preload();\r\n```\r\n\r\n#### Error Boundary reset\r\nError boundaries now have the ability to reset themselves and try again. It is the second argument to the fallback.\r\n\r\n```js\r\n<ErrorBoundary fallback={(err, reset) => {\r\n  if (count++ < 3) return reset();\r\n  return \"Failure\";\r\n}}><Component /></ErrorBoundary>\r\n```"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/37342818",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/37342818/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/37342818/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.24.0",
    "id": 37342818,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTM3MzQyODE4",
    "tag_name": "v0.24.0",
    "target_commitish": "master",
    "name": "v0.24.0 - Unified SSR",
    "draft": false,
    "prerelease": false,
    "created_at": "2021-02-04T09:56:57Z",
    "published_at": "2021-02-04T10:00:12Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.24.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.24.0",
    "body": "This release is the start of the rework of the SSR solution. Consolidating them under a single method. Unfortunately, this one comes with several breaking changes.\r\n\r\n### Breaking Changes\r\n\r\n#### Removed `solid-js/dom`\r\n\r\nIt's been a few versions deprecated. It's gone.\r\n\r\n#### Updated Resource API\r\n\r\nChanged to more resemble SWR and React Query. Needed to remove `createResourceState`so now need to use a getter over `createResource` to get same effect. See updated documentation.\r\n\r\n#### Change SSR render call signatures\r\n\r\nThey now return results objects that include the generated hydration script. No more need to generate it separately. Also comes autowrapped in the `script` tag now.\r\n\r\n#### `assignProps` to `mergeProps`\r\n\r\nWhile you use them the same way mostly it no longer has `Object.assign` semantics and always returns a new object. This is important as in many cases we need to upgrade to a Proxy.\r\n\r\n#### Renamed `getContextOwner` to `getOwner`\r\n\r\nRemoves confusion around context and consistent with new helper `runWithOwner`.\r\n\r\n#### Solid Element no longer uses State for props\r\n\r\nThis reduces the size of the library especially for those not using state. It also should slightly increase performance as no need for deep nesting of proxies. It also makes things behave more consistently avoided unintended deep wrapping.\r\n\r\n### Non-breaking Changes\r\n\r\n#### New non-reactive Async SSR\r\n\r\nI have now combined sync/streaming/async SSR into the same compiler output. To do so I have developed a new non-reactive Async SSR approach. After realizing how fast Solid renders, it occurred to me on the server we could do a much simpler approach if we were willing to re-render all content in Suspense boundaries. While that is some wasted work, compared to including the reactive system it's a killing.\r\n\r\n#### Increase SSR Performance\r\n\r\nThrough reusing static strings in the template we reduce repeated creation costs. This small improvement can make 5-8% improvements where you have many rows.\r\n\r\n#### Event Delegation\r\n\r\nSolid is now being more strict on what events it delegates. Limiting to standard pointer/touch/mouse/keyboard events. Custom events will no longer be delegated automatically. This increases compatibility for Web Component users who don't compose their events. Non-delegated events will still work and binding array syntax with them.\r\n\r\n#### State getters no longer memos\r\n\r\nAutomatic memos put some constraints on the disposal system that get in the way of making the approach flexible to hold all manner of reactive primitives. Some previous limitations included not being able to have nested getters. You can still manually create a memo and put it in a getter but the default will not be memoized.\r\n### New Features\r\n\r\n#### `children` helper\r\n\r\nResolves children and returns a memo. This makes it much easier to deal with children. Using same mechanism `<Switch>` can now have dynamic children like `<For>` inside.\r\n\r\n#### \"solid\" Export Conidition\r\nThis is the way to package the JSX components to be compiled to work on server or client. By putting the \"solid\" condition the source JSX will be prioritized over normal browser builds.\r\n\r\n### Bug Fixes\r\n\r\n* Top level primitive values not working with `reconcile`\r\n* Fix Dynamic Components to handle SVG\r\n* Rename potentially conflicting properties for event delegtion\r\n* Fixed State spreads to not loose reactiviy. Added support for dynamically created properties to track in spreads and helpers\r\n* TypeScript, always TypeScript\r\n"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/34892893",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/34892893/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/34892893/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.23.0",
    "id": 34892893,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTM0ODkyODkz",
    "tag_name": "v0.23.0",
    "target_commitish": "master",
    "name": "v0.23.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-12-06T10:41:52Z",
    "published_at": "2020-12-06T10:48:16Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.23.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.23.0",
    "body": "This release is mostly to support breaking change for TS users. JSX types no longer pollutes the global namespace. This means you need to update your projects to import it.\r\n\r\nFor users TS 4.1 or above add to your tsconfig to have JSX types in all your TSX files:\r\n\r\n```js\r\n\"compilerOptions\" {\r\n  \"jsx\": \"preserve\",\r\n  \"jsxImportSource\": \"solid-js\",\r\n}\r\n```\r\nOr mixing and matching? You can set JSX types per file using the pragma at the top of each file:\r\n```js\r\n/* @jsxImportSource solid-js */\r\n```\r\n\r\nYou can now import `JSX` types directly from Solid as neccessary:\r\n```js\r\nimport { JSX } from \"solid-js\";\r\n```\r\n\r\nFor instance, to add a custom element you would:\r\n```ts\r\nimport { JSX } from \"solid-js\";\r\n\r\ndeclare module \"solid-js\" {\r\n  export namespace JSX {\r\n    interface IntrinsicElements {\r\n      foo: CustomFooHTMLElementAttributes\r\n    }\r\n  }\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/33949525",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/33949525/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/33949525/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.22.0",
    "id": 33949525,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTMzOTQ5NTI1",
    "tag_name": "v0.22.0",
    "target_commitish": "master",
    "name": "v0.22.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-11-14T10:17:02Z",
    "published_at": "2020-11-14T10:19:55Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.22.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.22.0",
    "body": "### Unified Exports (Deprecation `solid-js/dom`)\r\n\r\nSolid now has streamlined exports for isomorphic development. This means from now on using `solid-js/web` instead of `solid-js/dom`. Based on compiler options it will swap out the appropriate packages for web. You should only ever import `solid-js`, `solid-js/h`, `solid-js/html`, and `solid-js/web` directly in your code.\r\n\r\n`solid-js/web` now exports an `isServer` field which indicates whether the code is executed for server rendering. This is constant in the respective packages meaning it can allow for powerful treeshaking/dead code elimination in final bundles even when used directly in end user code or 3rd party libraries.\r\n\r\n### Dev Mode\r\n\r\nAliasing `solid-js` to `solid-js/dev` links in a Dev mode for Solid. It's still a WIP process but it introduces some new APIs. First signals and state (and resources) have the ability to set a name for debug purposes as an options argument.\r\n\r\nWe also export a `serializeGraph` method which will serialize all the signals below the executing context in the reactive graph.\r\n\r\nFinally there is a new `globalThis._$afterUpdate` hook that can be assigned that will be called after every render that can be used for tracking purposes.\r\n\r\nThis is just the start but it is my intention to develop these features to allow for better HMR and DevTools.\r\n\r\n> Note: If the libraries are not being pulled into your bundle and are treated as external you may need to alias `solid-js` to `solid-js/dev` in your bundler in order to use dev mode.\r\n\r\n### Self contained HyperScript/Lit Modules\r\n\r\nWe now ship the respective DOM expressions code. This makes it much easier to use directly from a CDN like Skypack. You literally can develop with Solid in the old school write it in notepad before npm was a thing sort of way.\r\n\r\n```html\r\n<html>\r\n  <body>\r\n    <script type=\"module\">\r\n      import { createSignal, onCleanup } from \"https://cdn.skypack.dev/solid-js\";\r\n      import { render } from \"https://cdn.skypack.dev/solid-js/web\";\r\n      import html from \"https://cdn.skypack.dev/solid-js/html\";\r\n\r\n      const App = () => {\r\n        const [count, setCount] = createSignal(0),\r\n          timer = setInterval(() => setCount(count() + 1), 1000);\r\n        onCleanup(() => clearInterval(timer));\r\n        return html`<div>${count}</div>`;\r\n      };\r\n      render(App, document.body);\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nSave this in a text file called \"site.html\" and double click it and instant Solid in your browser.\r\n\r\n### renderToWebStream\r\n\r\nNew `renderToWebStream` for synchronous SSR mode. This allows us to stream from things like Cloudflare Workers.\r\n\r\n### createMutable\r\n\r\nNew mutable state primitive. Useful for interopt with other libraries. We can use this potentially for things like Vue/MobX compat. Or when we need to interact with libraries that can't be aware of Solid's reactive system, yet we want to capture updates. It supports getters and setters.\r\n\r\nUse with caution as it can promote difficult to reason about code, anti-patterns, and unexpected performance cliffs. Keep in mind Vue and MobX care less about these inefficient patterns since they have a VDOM safety net. We do not. For advanced users only.\r\n\r\n```js\r\nconst user = createMutable({\r\n  firstName: \"John\",\r\n  lastName: \"Smith\",\r\n  get fullName() {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  },\r\n  set fullName(value) {\r\n    const parts = value.split(\" \");\r\n    batch(() => {\r\n      this.firstName = parts[0];\r\n      this.lastName = parts[1];\r\n    });\r\n  }\r\n});\r\nconsole.log(user.fullName); // John Smith\r\nuser.fullName = \"Jake Murray\";\r\nconsole.log(user.firstName); // Jake\r\n```\r\n\r\n### State Getter/Setters are now Wrapped\r\n\r\nGetters are now wrapped in `createMemo` and setters in `batch`. However, this introduces a new limitation that they can only be top level to have this behavior.\r\n\r\n### State compatible with Prop Helpers\r\n\r\nYou can now use state with `assignProps` and `splitProps` helpers.\r\n\r\n### Removed DOM SSR\r\n\r\nNo longer supporting hydratable DOM SSR in patched(ie... JSDOM) node environments. Use the standard SSR methods instead. Can still run Solid in JSDOM for things like Jest, but can't be used for isomorphic development.\r\n"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/32718833",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/32718833/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/32718833/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.21.0",
    "id": 32718833,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTMyNzE4ODMz",
    "tag_name": "v0.21.0",
    "target_commitish": "master",
    "name": "v0.21.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-10-18T09:54:05Z",
    "published_at": "2020-10-18T09:55:14Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.21.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.21.0",
    "body": "### Attribute and Prop changes\r\n\r\nWe will now default to using Attributes where possible to be consistent. Solid is aiming to generally reflect the case insensitiveness of HTML. Custom Elements remain the one place that defaults to property setters on Dynamic elements.\r\n\r\nWhile TypeScript 4.2 is yet to be released, we are introduce `attr`, `prop`, `use` and `style` namespace directives. To allow more expressiveness in binding syntax.\r\n\r\n### Other Changes\r\n\r\n* New `on` and `onMount` helpers\r\n* More performant SSR escaping\r\n* Lazy eval SSR Component props (fix SSR Context API)\r\n* Add support for SSR with Solid Styled Components\r\n* Fix Lit Dom Expressions style in Template tags\r\n* Fix JSX Types"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/31797812",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/31797812/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/31797812/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.20.0",
    "id": 31797812,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTMxNzk3ODEy",
    "tag_name": "v0.20.0",
    "target_commitish": "master",
    "name": "V0.20.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-09-25T06:50:38Z",
    "published_at": "2020-09-25T06:57:11Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.20.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.20.0",
    "body": "### Re-scheduling Reactivity.\r\n\r\nThis release makes large changes to the Reactive System. Key changes are deferring `createEffect` to be after rendering and introducing `createComputed` do immediate reactive graph updates like loading async data.\r\n\r\n### Concurrency\r\n\r\nIn addition, the reactive model brings updates to Suspense and Transitions. Solid now has true concurrent rendering at a granular level. This mechanism does differ from React as it currently only supports a single future.\r\n\r\n### `createSelector`\r\n\r\nNew API to do delegated selection. Good for updating only the rows that change in large lists:\r\n```jsx\r\nconst [selected, setSelected] = createSignal();\r\nconst isSelected = createSelector(selected);\r\n\r\nreturn <For each={list()}>{\r\n  item => <li class={isSelected(item.id) ? \"selected\" : \"\"}>{item.text}</li>\r\n}</For>\r\n````\r\nThis will only re-evaluate the class binding when the value equals the id passed in or if the previous value was that id. So 100 rows and only 2 executions (remove old, and set new). Optionally takes a comparison function so you can do things like multi-select as well.\r\n\r\n### `as` prop in Styled Components\r\n\r\nLet's you override the element type in the view where used.\r\n\r\n### Removed APIs\r\n\r\n`afterEffects`, `createDependentEffect`, and `suspend` have been removed as they no longer make sense with the new reactive system timing.\r\n"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/30037042",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/30037042/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/30037042/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.19.0",
    "id": 30037042,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTMwMDM3MDQy",
    "tag_name": "v0.19.0",
    "target_commitish": "4ddf5ed72197e5863853f3c194a3276cc81a8023",
    "name": "v0.19.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-08-24T04:47:17Z",
    "published_at": "2020-08-24T05:07:26Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.19.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.19.0",
    "body": "## API Changes to support better SSR\r\n\r\n### Breaking Changes:\r\n\r\n#### Set State\r\nMutable form is no longer a default. It was strangely inconsistent as you could accidentally mutate in immutable forms. No indicator why it should behave differently and work. Increased the size of `state` for everyone and added performance overhead with additional proxy wrapping. Also it was based on returning undefined meaning function forms could never return undefined to blank a vlue. Solid has changed it into a state setter modifier `produce` after ImmerJS naming.\r\n\r\n```js\r\n// top level\r\nsetState(produce(s => {\r\n s.name = \"John\"\r\n}));\r\n\r\n// nested\r\nsetState('user', produce(s => {\r\n s.name = \"John\"\r\n}));\r\n```\r\n#### Prop APIs\r\nAfter writing `setDefaults`, `cloneProps`, and about to introduce `mergeProps` it became clear we can do this all with a single `assignProps` helper. So the former has been removed and now we have:\r\n\r\n```js\r\n// default props\r\nprops = assignProps({}, { name: \"Smith\" }, props);\r\n\r\n// clone props\r\nnewProps = assignProps({}, props);\r\n\r\n// merge props\r\nassignProps(props, otherProps)\r\n```\r\nIt follows the same pattern as ES `Object.assign` adding properties to the first argument and returning it. Except this method copies property descriptors without accessing them to preserve reactivity.\r\n\r\n#### `freeze` & `sample` have been renamed\r\nThese APIs never had the most obvious naming, borrowing from SRP and digital circuit concepts rather than common english. They are now `batch` and `untrack` respectively which better reflect their purpose. These are now deprecated and will be removed in next minor version.\r\n\r\n#### Resource API\r\nFor better automatic hydration support it is prudent to change resource signatures to take functions that return promises rather than promises themselves. This factory function has a lot advantages. This allows the library to decide whether to execute it or not. In certain cases we can choose skipping creating the promise altogether. It also leaves the door open for things like retry.\r\n\r\nWe use this mechanism to wire up streamed data from the server and automatic data hydration for resources rendered into the page in async SSR.\r\n\r\n#### SSR Improvements\r\n\r\nNew experimental support for Suspense aware synchronous, asynchronous, and streaming SSR with hydration, progressive hydration, and automatic isomorphic data serialization. Completely removed what was there before with a simple static generator and more examples, so all existing projects using `solid-ssr` package will break with this release. This is a much better foundation, and I hope to build better things on top.\r\n\r\n### New\r\n\r\n#### State Getters\r\nFor convenience of passing derived values or external reactive expressions through Solid's state initializer you can now add `getter`'s.\r\n\r\n```jsx\r\nconst [state, setState] = createState({\r\n  firstName: \"Jon\",\r\n  lastName: \"Snow\",\r\n  get greeting() { return `You know nothing ${state.firstName} ${state.lastName}` }\r\n});\r\n\r\nreturn <div>{state.greeting}</div>\r\n```\r\n\r\n#### Control Flow\r\n\r\nDynamic allows swapping Component dynamically.\r\n```jsx\r\n// element tag name\r\nconst [comp, setComp] = createSignal(\"h1\");\r\n\r\n<Dynamic component={comp()} {...otherProps} />\r\n\r\n// Component\r\nsetComp(MyComp);\r\n```\r\n\r\nErrorBoundary catches uncaught downstream errors and shows a fallback.\r\n```jsx\r\n<ErrorBoundary fallback={<div>Something went terribly wrong</div>}>\r\n  <MyComp />\r\n</ErrorBoundary>\r\n```\r\n\r\n#### Portals render in the Head\r\n\r\nYou can now render portals in the head with no additional div element.\r\n\r\n#### Multi-version detection\r\n\r\nCommon hard to track issue with Solid is when multiple versions of the library are running on the same page. It breaks reactivity, and is sometimes difficult to notice. Solid now detects if a version has already been loaded at runtime and complains.\r\n\r\n### Bug Fixes & Updates\r\n\r\nArguably a new feature but Solid now detects computation owners with pending dependency changes when trying to resolve nested computations. In so it will resolve those dependencies first. This fixes a long time issue with conditional processing with not directly related reactive atoms.\r\n\r\nImproved TypeScript Types."
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/26101784",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/26101784/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/26101784/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.18.0",
    "id": 26101784,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTI2MTAxNzg0",
    "tag_name": "v0.18.0",
    "target_commitish": "master",
    "name": "v0.18.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-05-02T06:15:29Z",
    "published_at": "2020-05-02T06:18:59Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.18.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.18.0",
    "body": "A lot of bug fixes, and introduction of string based SSR.\r\nBreaking Changes:\r\n* Removal of `forwardRef`. Value and function handled by just `ref`.\r\n* Change to how TypeScript is managed. Brought all JSX types inside the repo, and improved Component typing.\r\n* Changed default renderer in `solid-ssr` to string renderer.\r\n* Change inline styles to use `setProperty` and hyphenated or camelCase.\r\n\r\nLots of small bug fixes."
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/24835139",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/24835139/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/24835139/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.17.0",
    "id": 24835139,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTI0ODM1MTM5",
    "tag_name": "v0.17.0",
    "target_commitish": "master",
    "name": "v0.17.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-03-25T02:57:21Z",
    "published_at": "2020-03-25T03:01:39Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.17.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.17.0",
    "body": "## Consolidation in preparation for release candidate\r\n* Big refactor of core reactive system and render list reconciler\r\n  * Significantly smaller reducing core by atleast 3kb minified\r\n* Better handling of nested reactive nodes in Fragments\r\n* Update SSR mechanisms, added progressive event hydration, created repo for SSR environment (`solid-ssr`)\r\n* `@once` compiler hint to statically bind values\r\n* Better wrapping hueristics for booleans and ternaries in JSX\r\n\r\n## Breaking Changes\r\n* Removed `transform` prop from control flow. Idiomatic approach is to make a HOC for transformations of this nature.\r\n* Removed selectWhen/selectEach control flow transforms.\r\n* Changed event system\r\n  * `on____` prop to stop differentiating on case. Super confusing.Instead will try to delegate unless unable. Made TypeScript all CamelCase (although technically both forms behave identically)\r\n  * Removed `model` event delegation approach. Instead to create bound event use array: `onClick={[handler, row.id]}`. Inspired by Inferno's `linkEvent` helper.\r\n  * Renamed `events` prop to `on` prop\r\n  * Added `onCapture` prop for capture events"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/22849263",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/22849263/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/22849263/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.16.0",
    "id": 22849263,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTIyODQ5MjYz",
    "tag_name": "v0.16.0",
    "target_commitish": "master",
    "name": "v0.16.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2020-01-15T07:22:16Z",
    "published_at": "2020-01-15T07:25:09Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.16.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.16.0",
    "body": "### Big changes to experimental features:\r\n* New resource API `createResource` and `createResourceState` to replace `loadResource`. These are built to prioritize read capabilities and simplify implementation.\r\n* Support for Async SSR `renderToString` now returns a promise. Uses Suspense to know when it is done.\r\n* Progressive Hydration with code splitting support. Ability to track events and replay as hydration completes to reduce \"uncanny valley\". Components can be lazily loaded even during hydration. **No support for async data on hydration yet**, so render it from server and load into state synchronously.\r\n* New error boundary api with `onError`. If an error occurs in context or child context the nearest handler/s will be called.\r\n* Deprecating the `force` `setState` modifier as it is confusing."
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/22278593",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/22278593/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/22278593/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.15.0",
    "id": 22278593,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTIyMjc4NTkz",
    "tag_name": "v0.15.0",
    "target_commitish": "master",
    "name": "v0.15.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-12-17T06:59:40Z",
    "published_at": "2019-12-17T07:02:53Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.15.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.15.0",
    "body": "<b>A lot fixes and new features:</b>\r\n* Suspense improvements: `SuspenseList`, `useTransition`, trigger on read. Update API, and added `reload` and retry capability. Removed need for `awaitSuspense` by making `Show` and `Switch` control flows `Susepnse` aware.\r\n* Sample all Components. No more fear of nesting Components in JSX expressions. Top level in a Component will always be inert now.\r\n* Support for safe boolean and logical operators. This allows for the same optimization as the `Show` control flow for simple inline JSX conditionals like `<div>{state.count > 5 && <MyComp />}</div>`.\r\n* Support for non-curried operator forms. All operators now support an accessor first form as well as the functional curried form. Ex `map(() => state.list, item => item)`\r\n* Fix issues with spreading over `children` props.\r\n* Better Type Definitions."
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/21532483",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/21532483/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/21532483/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.14.0",
    "id": 21532483,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTIxNTMyNDgz",
    "tag_name": "v0.14.0",
    "target_commitish": "master",
    "name": "v0.14.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-11-17T07:00:47Z",
    "published_at": "2019-11-17T07:07:02Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.14.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.14.0",
    "body": "v0.14.0 brings changes to the render runtime and `setState` API\r\n\r\n* Adds diffing to batched computations to improve update performance\r\n* Supports support for mutable(TypeScript safe) `setState` API inspired by Immer. Function setters in Solid now pass a mutable version of state. Modifying will schedule updates. This form must not return a value. It can still be used immutably simply by returning the new value.\r\n* Changes how `force` and `reconcile` helpers work. They can now be used on nested paths.\r\n* Removes support for multi-path `setState`.\r\n"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/21011636",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/21011636/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/21011636/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.13.0",
    "id": 21011636,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTIxMDExNjM2",
    "tag_name": "v0.13.0",
    "target_commitish": "master",
    "name": "v0.13.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-10-28T02:56:39Z",
    "published_at": "2019-10-28T02:57:14Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.13.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.13.0",
    "body": "v0.13.0 contains large changes to the reactive system and compiler.\r\n\r\nThe main update is to simplify reactivity by removing computation recycling. While this was a useful feature to avoid unnecessary computation nodes, Solid now uses batching as a different approach to get similar results. Most templating libraries can offer breakneck update speeds without fine-grained updates. The real cost of these top-down approaches is the need to redo structural reconciliation. The current approach is that different computations will be created for each:\r\n* Dynamic insert expression (any expression between tags)\r\n* Spread operator\r\n* JSX template entry point(Top level tag, Fragment, or Component Children)\r\n\r\nTo aid in performance simple text inserts the `textContent` binding is now optimized so they can be batched.\r\n\r\nIn addition, there are some improvements to template cloning and SVG handing in SSR."
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/20803324",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/20803324/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/20803324/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.12.0",
    "id": 20803324,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTIwODAzMzI0",
    "tag_name": "v0.12.0",
    "target_commitish": "master",
    "name": "v0.12.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-10-18T11:58:53Z",
    "published_at": "2019-10-18T12:00:52Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.12.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.12.0",
    "body": "v0.12.0 contains a breaking change to the reactive rendering system\r\n\r\n- Removal of explicit dynamic binding `{( )}`, bindings will default to reactive unless impossible to be so (literal, function declaration, simple variable)\r\n- SVG Camelcase attribute Support\r\n- Prettier now supported!"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/20300087",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/20300087/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/20300087/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.11.0",
    "id": 20300087,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTIwMzAwMDg3",
    "tag_name": "v0.11.0",
    "target_commitish": "master",
    "name": "v0.11.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-09-27T07:53:03Z",
    "published_at": "2019-09-27T07:54:14Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.11.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.11.0",
    "body": "v0.11.0 continues to add updates to the reactive system as well as some new features:\r\n\r\n* Fix reactivity resolution ordering on downstream conditionals\r\n* Add basic (non-namespaced) SVG support\r\n* Add experimental Server Side Rendering and Client Side Hydration capabilities\r\n* Add Suspense aware control flow transformation (`awaitSuspense`)\r\n* Allow state objects to track functions\r\n* More TypeScript definition improvements and fixes"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/19220679",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/19220679/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/19220679/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.10.0",
    "id": 19220679,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTE5MjIwNjc5",
    "tag_name": "v0.10.0",
    "target_commitish": "master",
    "name": "v0.10.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-08-12T05:44:56Z",
    "published_at": "2019-08-12T05:46:34Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.10.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.10.0",
    "body": "v0.10.0 makes significant changes to the reactive system. Key updates:\r\n* Fixed synchronicity on all hooks/control flows.\r\n* Adds the ability to use comparators on `createMemo`.\r\n* Fixes bugs with nested control flows.\r\n* Fixes bugs with Suspense.\r\n* Update Suspense `delayMs` to `maxDuration` to match React. (Usage of `maxDuration` still experimental)"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/18747141",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/18747141/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/18747141/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.9.0",
    "id": 18747141,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTE4NzQ3MTQx",
    "tag_name": "v0.9.0",
    "target_commitish": "master",
    "name": "v0.9.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-07-20T04:43:53Z",
    "published_at": "2019-07-20T05:08:19Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.9.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.9.0",
    "body": "This is a big one. It includes the Control Flow Refactor described in #42. It brings Solid up to date with the latest version JSX DOM Expressions. Read the release notes [here](https://github.com/ryansolid/babel-plugin-jsx-dom-expressions/releases/tag/v0.11.0). What this means:\r\n\r\n* Optimized List reconciliation is exposed for any array passed as child nodes. This includes Fragments which are now also just arrays. This addresses issues like #37. One side effect is that dynamic bindings are not activated until attached and are made inert when detached. If you need to maintain context I suggest wrapping in a `createMemo` so that the value is remembered between inserts.\r\n* Solid ships with Control Flow operators. However, you are not limited to them. While you should be conscious of wasted work, you can use any Components/functions to handle control flow. The control flow operators are much simpler now since they are independent of DOM manipulation.\r\n* To support purely Reactive array iteration I reintroduced the `map` operator. I've added `pipe` and `reduce` as well. These are very basic but can serve as a basis for users to create Functional operators. They are in the same vein as RxJS pipe-able operators.\r\n* The return type from JSX may be a Node, Function, or Array of those. Since not all JSX expressions return Nodes anymore the top level now needs to use `insert` from `solid-js/dom` instead of just appending the returned element. `solid-js/dom` now exports `render` for convenience which does both the `insert` and automatically wraps it with `createRoot`. This syntax is based on React's render.\r\n* While still not perfect, some big improvements to TypeScript support, by removing both Custom Directives (use forwardRef binding instead) and `<$>` tag. New Control Flow also now has explicit type defs. JSX Children are now handled consistently with react.\r\n* Newly released is also [babel-preset-solid](https://github.com/ryansolid/babel-preset-solid). This will take care of all the Solid specific configuration for the JSX plugin making it easier than ever to get started.\r\n\r\nThere have been several small changes, but those are the highlights. Bear with me as I update all the examples over the next few days."
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/18013677",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/18013677/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/18013677/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.8.0",
    "id": 18013677,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTE4MDEzNjc3",
    "tag_name": "v0.8.0",
    "target_commitish": "master",
    "name": "v0.8.0",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-06-15T06:10:41Z",
    "published_at": "2019-06-15T06:11:08Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.8.0",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.8.0",
    "body": "v0.8.0 brings further improvements in reducing bundle size and optimizations in reactivity. New Features:\r\n* Universal loadResource API\r\n* afterEffects hook\r\n* Switch Control Flow"
  },
  {
    "url": "https://api.github.com/repos/solidjs/solid/releases/17598954",
    "assets_url": "https://api.github.com/repos/solidjs/solid/releases/17598954/assets",
    "upload_url": "https://uploads.github.com/repos/solidjs/solid/releases/17598954/assets{?name,label}",
    "html_url": "https://github.com/solidjs/solid/releases/tag/v0.7.2",
    "id": 17598954,
    "author": {
      "login": "ryansolid",
      "id": 2768267,
      "node_id": "MDQ6VXNlcjI3NjgyNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2768267?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansolid",
      "html_url": "https://github.com/ryansolid",
      "followers_url": "https://api.github.com/users/ryansolid/followers",
      "following_url": "https://api.github.com/users/ryansolid/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansolid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansolid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansolid/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansolid/orgs",
      "repos_url": "https://api.github.com/users/ryansolid/repos",
      "events_url": "https://api.github.com/users/ryansolid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansolid/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "node_id": "MDc6UmVsZWFzZTE3NTk4OTU0",
    "tag_name": "v0.7.2",
    "target_commitish": "master",
    "name": "v0.7.2",
    "draft": false,
    "prerelease": false,
    "created_at": "2019-05-26T21:16:21Z",
    "published_at": "2019-05-27T05:06:27Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/solidjs/solid/tarball/v0.7.2",
    "zipball_url": "https://api.github.com/repos/solidjs/solid/zipball/v0.7.2",
    "body": "This release fully internalizes the reactive library in Solid. This will allow further optimizations in the future as well as reducing generated bundle size even further. This release also fixes several bugs around using Context API's with Solid Element."
  }
]